# """
# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать
#  у пользователя, предусмотреть обработку ситуации деления на ноль.
# """
# value1 = int(input('Введите число 1: '))
# value2 = int(input('Введите число 2: '))
#
# def division(arg1, arg2):
#     try:
#         return arg1 / arg2
#     except ZeroDivisionError:
#         print("Деление на ноль!")
#
# print(division(value1, value2))
#
# """
# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения,
#  город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод
#   данных о пользователе одной строкой.
# """
# def infomation(**kwargs):
#     return f"Добрый день {kwargs['name']} {kwargs['surname']}, {kwargs['birthdate']} год(а) рождения, проживающий" \
#            f" в городе {kwargs['city']}. Email:{kwargs['email']}. Телефон:{kwargs['phone']}"
#
# print(infomation(name='Иван', surname='Иванов', birthdate='1983', city='Рязань', email='example@example.com',
#                  phone='8-905-444-22-33'))
#
# """
# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух
#  аргументов.
# """
# def my_func(a, b, c):
#     list = [a, b, c]
#     list.remove(min(a, b, c))
#     return sum(list)
#
#
# print(my_func(7, 5, 11))
#
# """
# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
#  возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
#   необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
# - более сложная реализация без оператора **, предусматривающая использование цикла.
# """
# # # Первый способ с оператором '**'
# def my_func(x, y):
#     return x ** y
#
# print(my_func(2, -6))
# # или
# print((lambda x, y: x ** y)(2, -6))
#
# # Второй способ без оператора '**'
# def my_func(x, y):
#     pow = 1
#     while y < 0:
#         pow *= 1 / x
#         y += 1
#         # print(x)
#         # print(y)
#     return pow
#
# print(my_func(2, -6))
#
# """
# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма
#  чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных
#   чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение
#    программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих
#     чисел к полученной ранее сумме и после этого завершить программу.
# """
# def my_func():
#     sum = 0
#     flag = True
#     while flag == True:
#         number = input('Введите число или знак q для выхода: ').split()
#
#         result = 0
#         for value in range(len(number)):
#             if number[value] == 'q':
#                 flag = False
#                 break
#             else:
#                 result += int(number[value])
#         sum += result
#     print(f'Общая сумма : {sum}')
#
# my_func()
#
# """
# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной
#  первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит
#  из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной
#   буквы. Необходимо использовать написанную ранее функцию int_func().
# """
# def int_func (*args):
#     word = input("Ведите слово: ")
#     print(word.title())
#     return
#
# int_func()